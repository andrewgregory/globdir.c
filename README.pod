=head1 NAME

globdir.c - expand glob patterns relative to a specific directory

=head1 SYNOPSIS

glob(3) only expands glob patterns relative to the current working directory.
In order to expand glob patterns relative to a different directory the caller
must either chdir(2) into the directory or alter the glob to refer to that
directory including accounting for any glob-characters in the path.  C<globdir>
provides a neater and more direct way to expand patterns outside the current
directory.

=head1 DESCRIPTION

=over

=item typedef glob_t globdir_t;

Structure used to store the results of the glob expansion.  Includes the same
members POSIX requires for C<glob_t>.  Currently C<globdir_t> is just an alias
for C<glob_t> but this may change in a future revision.

=item void globdirfree(globdir_t *g);

Free the memory associated with a C<globdir_t> structure but not the structure
itself.  This should be used in place of C<globfree> for the results of
C<globat> and C<globdir>.

=item int globdir(const char *dir, const char *pattern, int flags,
        int (*errfunc) (const char *epath, int eerrno), globdir_t *pglob);

Expand a glob pattern relative to a specific directory C<dir>.  All other
arguments are identical to their C<glob> counterparts.  C<flags> may include
all flags specified by POSIX and C<GLOB_PERIOD> if defined in C<glob.h>.

=item int globat(int fd, const char *pattern, int flags,
        int (*errfunc) (const char *epath, int eerrno), globdir_t *pglob);

Identical to C<globdir> except the base directory is specified as an open
directory file descriptor C<fd> rather than a string path.

=item int globdir_str_is_pattern(const char *str, int noescape);

Check if C<str> is a POSIX glob pattern. Backslash escaping will not be
performed if C<noescape> is true.

=item char *globdir_escape_pattern(const char *pattern);

Return a copy of C<pattern> with all special characters escaped.  The returned
string needs to be freed by the caller.  This can be used to accomplish
relative globing with glob(3) as long as C<GLOB_NOESCAPE> or other
syntax-altering flags (such as glibc's C<GLOB_BRACE>) are not used:

 int globdir(const char *dir, const char *pattern, int flags,
         int(*errfunc), (const char *epath, int eerrno), glob_t *pglob) {
     int ret;
     char *escaped_dir, relpattern[PATH_MAX];
     if( flags & GLOB_NOESCAPE ) { errno = EINVAL; return GLOB_ABORTED; }
     if( (escaped_dir = globdir_escape_pattern(dir)) == NULL) { return GLOB_NOSPACE; }
     if( snprintf(relpattern, PATH_MAX, "%s/%s", escaped_dir, pattern) >= PATH_MAX) { return GLOB_NOSPACE; }
     ret = glob(relpattern, flags, errfunc, &pglob);
     free(escaped_pattern);
     return ret;
 }

=back

=head1 EXAMPLES

 #include <stdio.h>

 #include "globdir.c"

 int main(int argc, char *argv[]) {
    const char *base_dir, *glob_str;
    globdir_t globbuf;
    size_t i;

    if(argc != 3)  {
        fputs("error: wrong number of arguments (expected 2)\n", stderr);
        return 1;
    }

    base_dir = argv[1];
    glob_str = argv[2];

    switch(globdir(base_dir, glob_str, GLOB_ERR, NULL, &globbuf)) {
        case GLOB_ABORTED:
            fputs("error: directory read error\n", stderr);
            return 1;
        case GLOB_NOSPACE:
            fputs("error: memory exhausted\n", stderr);
            return 1;
        case GLOB_NOMATCH:
            fputs("error: no matches\n", stderr);
            return 1;
        default:
            for(i = 0; i < globbuf.gl_pathc; i++) {
                puts(globbuf.gl_pathv[i]);
            }
            globdirfree(&globbuf);
    }

    return 0;
 }

=head1 COPYRIGHT AND LICENSE

Copyright 2017-2020 Andrew Gregory <andrew.gregory.8@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
